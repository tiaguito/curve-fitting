#!/usr/bin/env python3

'''
Simple script that allows for the calculation 
of curve fitting polynommials using the least squares approach
Specifically it calculates the coefficients needed for a range
[x, y]

NOTE: Currently using it to calculate the approximation of the
Sigmoid function

Source code obtained from: 
https://blog.mbedded.ninja/mathematics/curve-fitting/polynomial-curve-fitting/
'''

import matplotlib.pyplot as plt
plt.switch_backend('agg') # Allow matplotlib to work in Docker

import numpy as np

def calc_tri(max_num, index):
    """
    Calculates the triangular number given the maximum number and
    the current index.
    e.g. calc_tri(3, i) for i = 0..8 would give:
    0, 1, 2, 3, 2, 1, 0, 1, 2
    """
    print(f'calc_tri() called with max_num = {max_num}, index = {index}.')
    period = max_num * 2
    print(f'period = {period}')

    mod = index % period
    print(f'mod = {mod}')


    if mod <= max_num:
        tri = mod
    else:
        tri = max_num - (mod - max_num)

    print(f'tri = {tri}')


def find_best_fit_poly(x_data, y_data, poly_degree):
    # First co-efficient is a0*x^0, second is a1*x^1, e.t.c
    poly_coefficients = np.zeros(poly_degree + 1)
    
    # POPULATE MATRIX A
    matrix_A = np.zeros([poly_coefficients.size, poly_coefficients.size])

    for i in range(poly_coefficients.size*2 - 1):
        sum = (x_data**i).sum()

        # Sum is inserted on a trailing diagonal
        # All row, col pairs that add to i are valid
        curr_col = i
        curr_row = 0
        if curr_col > poly_coefficients.size - 1:
            curr_col = poly_coefficients.size - 1
            curr_row = i - curr_col

        while True:
            matrix_A[curr_row, curr_col] = sum
            curr_col -= 1
            curr_row += 1

            if curr_col < 0 or curr_row > poly_coefficients.size - 1:
                break

    print(f'matrix_A = {matrix_A}')

    # POPULATE MATRIX B
    matrix_B = np.zeros([poly_coefficients.size, 1])

    for i in range(poly_coefficients.size):
        print(x_data**i)
        sum = ((x_data**i)*y_data).sum()
        print(f'i = {i}, sum = {sum}')
        matrix_B[i, 0] = sum

    print(f'matrix_B = {matrix_B}')

    # Solve for x. Ax = B so x = A-1*B
    x = np.dot(np.linalg.inv(matrix_A), matrix_B)

    print(f'x = {x}')
    return x


# ============================================= #
# =================== INPUTS ================== #
# ============================================= #
x_data = np.array([-16.0000000000,-15.9000000000,-15.8000000000,-15.7000000000,-15.6000000000,-15.5000000000,-15.4000000000,-15.3000000000,-15.2000000000,-15.1000000000,-15.0000000000,-14.9000000000,-14.8000000000,-14.7000000000,-14.6000000000,-14.5000000000,-14.4000000000,-14.3000000000,-14.2000000000,-14.1000000000,-14.0000000000,-13.9000000000,-13.8000000000,-13.7000000000,-13.6000000000,-13.5000000000,-13.4000000000,-13.3000000000,-13.2000000000,-13.1000000000,-13.0000000000,-12.9000000000,-12.8000000000,-12.7000000000,-12.6000000000,-12.5000000000,-12.4000000000,-12.3000000000,-12.2000000000,-12.1000000000,-12.0000000000,-11.9000000000,-11.8000000000,-11.7000000000,-11.6000000000,-11.5000000000,-11.4000000000,-11.3000000000,-11.2000000000,-11.1000000000,-11.0000000000,-10.9000000000,-10.8000000000,-10.7000000000,-10.6000000000,-10.5000000000,-10.4000000000,-10.3000000000,-10.2000000000,-10.1000000000,-10.0000000000,-9.9000000000,-9.8000000000,-9.7000000000,-9.6000000000,-9.5000000000,-9.4000000000,-9.3000000000,-9.2000000000,-9.1000000000,-9.0000000000,-8.9000000000,-8.8000000000,-8.7000000000,-8.6000000000,-8.5000000000,-8.4000000000,-8.3000000000,-8.2000000000,-8.1000000000,-8.0000000000,-7.9000000000,-7.8000000000,-7.7000000000,-7.6000000000,-7.5000000000,-7.4000000000,-7.3000000000,-7.2000000000,-7.1000000000,-7.0000000000,-6.9000000000,-6.8000000000,-6.7000000000,-6.6000000000,-6.5000000000,-6.4000000000,-6.3000000000,-6.2000000000,-6.1000000000,-6.0000000000,-5.9000000000,-5.8000000000,-5.7000000000,-5.6000000000,-5.5000000000,-5.4000000000,-5.3000000000,-5.2000000000,-5.1000000000,-5.0000000000,-4.9000000000,-4.8000000000,-4.7000000000,-4.6000000000,-4.5000000000,-4.4000000000,-4.3000000000,-4.2000000000,-4.1000000000,-4.0000000000,-3.9000000000,-3.8000000000,-3.7000000000,-3.6000000000,-3.5000000000,-3.4000000000,-3.3000000000,-3.2000000000,-3.1000000000,-3.0000000000,-2.9000000000,-2.8000000000,-2.7000000000,-2.6000000000,-2.5000000000,-2.4000000000,-2.3000000000,-2.2000000000,-2.1000000000,-2.0000000000,-1.9000000000,-1.8000000000,-1.7000000000,-1.6000000000,-1.5000000000,-1.4000000000,-1.3000000000,-1.2000000000,-1.1000000000,-1.0000000000,-0.9000000000,-0.8000000000,-0.7000000000,-0.6000000000,-0.5000000000,-0.4000000000,-0.3000000000,-0.2000000000,-0.1000000000,-0.0000000000,0.1000000000,0.2000000000,0.3000000000,0.4000000000,0.5000000000,0.6000000000,0.7000000000,0.8000000000,0.9000000000,1.0000000000,1.1000000000,1.2000000000,1.3000000000,1.4000000000,1.5000000000,1.6000000000,1.7000000000,1.8000000000,1.9000000000,2.0000000000,2.1000000000,2.2000000000,2.3000000000,2.4000000000,2.5000000000,2.6000000000,2.7000000000,2.8000000000,2.9000000000,3.0000000000,3.1000000000,3.2000000000,3.3000000000,3.4000000000,3.5000000000,3.6000000000,3.7000000000,3.8000000000,3.9000000000,4.0000000000,4.1000000000,4.2000000000,4.3000000000,4.4000000000,4.5000000000,4.6000000000,4.7000000000,4.8000000000,4.9000000000,5.0000000000,5.1000000000,5.2000000000,5.3000000000,5.4000000000,5.5000000000,5.6000000000,5.7000000000,5.8000000000,5.9000000000,6.0000000000,6.1000000000,6.2000000000,6.3000000000,6.4000000000,6.5000000000,6.6000000000,6.7000000000,6.8000000000,6.9000000000,7.0000000000,7.1000000000,7.2000000000,7.3000000000,7.4000000000,7.5000000000,7.6000000000,7.7000000000,7.8000000000,7.9000000000,8.0000000000,8.1000000000,8.2000000000,8.3000000000,8.4000000000,8.5000000000,8.6000000000,8.7000000000,8.8000000000,8.9000000000,9.0000000000,9.1000000000,9.2000000000,9.3000000000,9.4000000000,9.5000000000,9.6000000000,9.7000000000,9.8000000000,9.9000000000,10.0000000000,10.1000000000,10.2000000000,10.3000000000,10.4000000000,10.5000000000,10.6000000000,10.7000000000,10.8000000000,10.9000000000,11.0000000000,11.1000000000,11.2000000000,11.3000000000,11.4000000000,11.5000000000,11.6000000000,11.7000000000,11.8000000000,11.9000000000,12.0000000000,12.1000000000,12.2000000000,12.3000000000,12.4000000000,12.5000000000,12.6000000000,12.7000000000,12.8000000000,12.9000000000,13.0000000000,13.1000000000,13.2000000000,13.3000000000,13.4000000000,13.5000000000,13.6000000000,13.7000000000,13.8000000000,13.9000000000,14.0000000000,14.1000000000,14.2000000000,14.3000000000,14.4000000000,14.5000000000,14.6000000000,14.7000000000,14.8000000000,14.9000000000,15.0000000000,15.1000000000,15.2000000000,15.3000000000,15.4000000000,15.5000000000,15.6000000000,15.7000000000,15.8000000000,15.9000000000,16.0000000000])
y_data = np.array([0.0000001125,0.0000001244,0.0000001375,0.0000001519,0.0000001679,0.0000001855,0.0000002051,0.0000002266,0.0000002505,0.0000002768,0.0000003059,0.0000003381,0.0000003736,0.0000004129,0.0000004564,0.0000005043,0.0000005574,0.0000006160,0.0000006808,0.0000007524,0.0000008315,0.0000009190,0.0000010156,0.0000011224,0.0000012405,0.0000013710,0.0000015151,0.0000016745,0.0000018506,0.0000020452,0.0000022603,0.0000024980,0.0000027608,0.0000030511,0.0000033720,0.0000037266,0.0000041186,0.0000045517,0.0000050304,0.0000055595,0.0000061442,0.0000067904,0.0000075045,0.0000082938,0.0000091660,0.0000101300,0.0000111954,0.0000123728,0.0000136740,0.0000151121,0.0000167014,0.0000184579,0.0000203991,0.0000225444,0.0000249154,0.0000275357,0.0000304316,0.0000336320,0.0000371689,0.0000410779,0.0000453979,0.0000501722,0.0000554485,0.0000612797,0.0000677241,0.0000748462,0.0000827172,0.0000914159,0.0001010292,0.0001116533,0.0001233946,0.0001363703,0.0001507104,0.0001665581,0.0001840719,0.0002034270,0.0002248168,0.0002484551,0.0002745782,0.0003034470,0.0003353501,0.0003706061,0.0004095672,0.0004526222,0.0005002011,0.0005527786,0.0006108794,0.0006750827,0.0007460288,0.0008244247,0.0009110512,0.0010067708,0.0011125360,0.0012293986,0.0013585200,0.0015011823,0.0016588011,0.0018329389,0.0020253204,0.0022378485,0.0024726232,0.0027319608,0.0030184163,0.0033348073,0.0036842399,0.0040701377,0.0044962732,0.0049668017,0.0054862989,0.0060598015,0.0066928509,0.0073915413,0.0081625712,0.0090132987,0.0099518019,0.0109869426,0.0121284350,0.0133869178,0.0147740317,0.0163024994,0.0179862100,0.0198403057,0.0218812709,0.0241270214,0.0265969936,0.0293122308,0.0322954647,0.0355711893,0.0391657228,0.0431072549,0.0474258732,0.0521535631,0.0573241759,0.0629733561,0.0691384203,0.0758581800,0.0831726965,0.0911229610,0.0997504891,0.1090968212,0.1192029220,0.1301084744,0.1418510649,0.1544652651,0.1679816149,0.1824255238,0.1978161114,0.2141650170,0.2314752165,0.2497398944,0.2689414214,0.2890504974,0.3100255189,0.3318122278,0.3543436938,0.3775406688,0.4013123399,0.4255574832,0.4501660027,0.4750208125,0.5000000000,0.5249791875,0.5498339973,0.5744425168,0.5986876601,0.6224593312,0.6456563062,0.6681877722,0.6899744811,0.7109495026,0.7310585786,0.7502601056,0.7685247835,0.7858349830,0.8021838886,0.8175744762,0.8320183851,0.8455347349,0.8581489351,0.8698915256,0.8807970780,0.8909031788,0.9002495109,0.9088770390,0.9168273035,0.9241418200,0.9308615797,0.9370266439,0.9426758241,0.9478464369,0.9525741268,0.9568927451,0.9608342772,0.9644288107,0.9677045353,0.9706877692,0.9734030064,0.9758729786,0.9781187291,0.9801596943,0.9820137900,0.9836975006,0.9852259683,0.9866130822,0.9878715650,0.9890130574,0.9900481981,0.9909867013,0.9918374288,0.9926084587,0.9933071491,0.9939401985,0.9945137011,0.9950331983,0.9955037268,0.9959298623,0.9963157601,0.9966651927,0.9969815837,0.9972680392,0.9975273768,0.9977621515,0.9979746796,0.9981670611,0.9983411989,0.9984988177,0.9986414800,0.9987706014,0.9988874640,0.9989932292,0.9990889488,0.9991755753,0.9992539712,0.9993249173,0.9993891206,0.9994472214,0.9994997989,0.9995473778,0.9995904328,0.9996293939,0.9996646499,0.9996965530,0.9997254218,0.9997515449,0.9997751832,0.9997965730,0.9998159281,0.9998334419,0.9998492896,0.9998636297,0.9998766054,0.9998883467,0.9998989708,0.9999085841,0.9999172828,0.9999251538,0.9999322759,0.9999387203,0.9999445515,0.9999498278,0.9999546021,0.9999589221,0.9999628311,0.9999663680,0.9999695684,0.9999724643,0.9999750846,0.9999774556,0.9999796009,0.9999815421,0.9999832986,0.9999848879,0.9999863260,0.9999876272,0.9999888046,0.9999898700,0.9999908340,0.9999917062,0.9999924955,0.9999932096,0.9999938558,0.9999944405,0.9999949696,0.9999954483,0.9999958814,0.9999962734,0.9999966280,0.9999969489,0.9999972392,0.9999975020,0.9999977397,0.9999979548,0.9999981494,0.9999983255,0.9999984849,0.9999986290,0.9999987595,0.9999988776,0.9999989844,0.9999990810,0.9999991685,0.9999992476,0.9999993192,0.9999993840,0.9999994426,0.9999994957,0.9999995436,0.9999995871,0.9999996264,0.9999996619,0.9999996941,0.9999997232,0.9999997495,0.9999997734,0.9999997949,0.9999998145,0.9999998321,0.9999998481,0.9999998625,0.9999998756,0.9999998875])

# A list of all the degrees of the polynomials that will be drawn on the
# graph
poly_degrees = np.array([ 3, 7 ])

poly_coefficients = []
for i in range(poly_degrees.size):
    poly_coefficients.append(find_best_fit_poly(x_data, y_data, poly_degrees[i]))

print(poly_coefficients)

# ============================================= #
# ================== PLOTTING ================= #
# ============================================= #
fig, ax = plt.subplots()

# Plot points
points = ax.scatter(x_data, y_data, color='green', label='Data points')

bestFitX = np.linspace(x_data.min() - 0.1, x_data.max() + 0.1, num=100)

# Plot best fit polynomials
best_fit_polys = []
for poly_coefficient in poly_coefficients:
    
    bestFitY = np.zeros(bestFitX.size)
    for i in range(poly_coefficient.size):
        bestFitY += (bestFitX**i)*poly_coefficient[i]

    best_fit, = ax.plot(bestFitX, bestFitY, label=f'{i} degree polynomial')
    best_fit_polys.append(best_fit)

plt.title('Polynomial Curve Fitting\n(Least Squares Approach)')
plt.xlabel('x')
plt.ylabel('y')
ax.legend()
plt.savefig('many-polynomial-best-fits-on-graph.png')
